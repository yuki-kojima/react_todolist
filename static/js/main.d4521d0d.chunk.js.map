{"version":3,"sources":["Title.js","TaskInput.js","TaskList.js","TaskSort.js","App.js","index.js"],"names":["Title","react_default","a","createElement","Component","TaskInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputText","event","value","target","setState","trim","length","props","onAdd","_this2","type","id","onChange","e","onChangeText","placeholder","onClick","onClickAdd","TaskList","nodes","taskList","filter","item","filterType","completed","map","node","label","key","checked","onChangeItem","className","TaskSort","handleFilterChange","App","concat","input","document","getElementById","push","Date","now","i","src_Title","src_TaskInput","handleAddClick","src_TaskList","handleListChange","src_TaskSort","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.d4521d0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Title extends Component {\n    render() {\n        return (<h1>TODO LIST</h1>);\n    }\n}\n\nexport default Title;","import React, { Component } from 'react';\n\nclass TaskInput extends Component {\n    constructor(){\n        super()\n        this.state = {\n            inputText: ''\n            }\n    }\n    onChangeText(event) {\n        const value = event.target.value;\n        this.setState ({\n            inputText: value\n        });\n    }\n    onClickAdd() {\n        const value = this.state.inputText;\n\n        if(value.trim().length === 0) {\n            return;\n        }\n\n        this.setState ({\n            inputText: ''\n        })\n\n        this.props.onAdd(value.trim());\n    }\n    render() {\n        return (\n            <div>\n                <input type=\"text\" id=\"js-inputTask\" onChange={e => this.onChangeText(e)} placeholder=\"タスクを入力してね\" />\n                <button onClick={e => this.onClickAdd(e)}>追加</button>\n            </div>\n        )\n    }\n}\nexport default TaskInput;","import React, { Component } from 'react';\n\nclass TaskList extends Component {\n    render() {\n        const displayTaskList = this.props.taskList.filter(item => {\n            switch(this.props.filterType) {\n                case \"completed\":\n                    return item.completed === true;\n                case \"active\":\n                    return item.completed === false;\n                default:\n                    return true;\n            }\n        });\n\n        const nodes = displayTaskList.map(item => {\n            const node = item.completed === true\n                ? <del>{item.label}</del>\n                : <span>{item.label}</span>\n            return (\n                <li key={item.key}>\n                    <label>\n                        <input type=\"checkbox\" checked={item.completed} onChange={e => this.props.onChangeItem(item.key)}></input>\n                        {node}\n                    </label>\n                </li>\n            );\n        });\n        return <ul className=\"App-todolist\">{nodes}</ul>;\n    }\n}\n\nexport default TaskList;","import React, { Component } from 'react';\n\nclass TaskSort extends Component {\n    render() {\n        return (\n            <div>\n                <label>\n                    <input type=\"radio\" value=\"all\" onChange={e => this.props.handleFilterChange(e.target.value)} checked={this.props.filterType === \"all\"} />\n                    全て\n          </label>\n                <label>\n                    <input type=\"radio\" value=\"active\" onChange={e => this.props.handleFilterChange(e.target.value)} checked={this.props.filterType === \"active\"} />\n                    未完了のみ\n          </label>\n                <label>\n                    <input type=\"radio\" value=\"completed\" onChange={e => this.props.handleFilterChange(e.target.value)} checked={this.props.filterType === \"completed\"} />\n                    完了のみ\n          </label>\n            </div>\n        )\n    }\n}\n\nexport default TaskSort;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./Title.js\";\nimport TaskInput from './TaskInput.js';\nimport TaskList from \"./TaskList.js\";\nimport TaskSort from \"./TaskSort.js\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    // ステート\n    this.state = {\n      taskList: [],\n      filterType: \"all\"\n    };\n\n  }\n  handleAddClick(label) {\n    const taskList = this.state.taskList.concat();\n    const input = document.getElementById('js-inputTask');\n    taskList.push({\n      key: Date.now(), // ユニークなキーということで今回は時間\n      completed: false, // 完了しているか\n      label: label // タスクの文字列 \n    });\n    this.setState({\n      taskList: taskList\n    });\n    input.value = '';\n  }\n  handleListChange(key) {\n    const taskList = this.state.taskList.concat();\n\n    for (var i = 0; i < taskList.length; i++) {\n      if (taskList[i].key === key) {\n        taskList[i].completed = !taskList[i].completed;\n      }\n    }\n    this.setState({\n      taskList: taskList\n    })\n  }\n  handleFilterChange(value) {\n    this.setState({\n      filterType: value\n    });\n  }\n  render() {\n\n    return <div className=\"App\">\n        <Title />\n        <TaskInput onAdd={label => this.handleAddClick(label)} />\n        <TaskList taskList={this.state.taskList} onChangeItem={id => this.handleListChange(id)} filterType={this.state.filterType}/>\n        <TaskSort handleFilterChange={value => this.handleFilterChange(value)} filterType={this.state.filterType} />\n      </div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}